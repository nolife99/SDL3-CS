name: Build native libs
on:
  workflow_dispatch:
    inputs:
      sdl-version:
        description: "The SDL version to build"
        required: true
        type: string

jobs:
  build:
    name: Build SDL for ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            runner: ubuntu-latest
          - os: ubuntu-24.04-arm
            runner: ubuntu-24.04-arm
          - os: windows-2025
            runner: windows-2025
          - os: windows-11-arm
            runner: windows-11-arm
          - os: macos-13
            runner: macos-13
          - os: macos-latest
            runner: macos-latest
          # pseudo targets for 32-bit builds
          - os: linux-x86
            runner: ubuntu-latest
          - os: windows-x86
            runner: windows-2025

    steps:
      - name: Clone SDL
        uses: actions/checkout@v4
        with:
          repository: 'libsdl-org/SDL'
          submodules: recursive
          fetch-depth: 0
          ref: release-${{ inputs.sdl-version }}

      # ---------- Linux 64/ARM deps ----------
      - name: Install Deps (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          sudo apt-get update -y && sudo apt-get install -y \
            cmake make ninja-build libasound2-dev libpulse-dev \
            libaudio-dev libjack-dev libsndio-dev libusb-1.0-0-dev \
            libx11-dev libxext-dev libxrandr-dev libxcursor-dev \
            libxfixes-dev libxi-dev libxss-dev libwayland-dev \
            libdecor-0-dev libdbus-1-dev libibus-1.0-dev libudev-dev \
            fcitx-libs-dev

      # ---------- Linux x86 (32-bit) deps ----------
      - name: Install Deps (Linux x86)
        if: matrix.os == 'linux-x86'
        shell: bash
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update -y
          sudo apt-get install -y \
            gcc-multilib g++-multilib \
            libasound2-dev:i386 libpulse-dev:i386 libaudio-dev:i386 \
            libjack-dev:i386 libsndio-dev:i386 libusb-1.0-0-dev:i386 \
            libx11-dev:i386 libxext-dev:i386 libxrandr-dev:i386 libxcursor-dev:i386 \
            libxfixes-dev:i386 libxi-dev:i386 libxss-dev:i386 libwayland-dev:i386 \
            libdbus-1-dev:i386 libudev-dev:i386

      # ---------- Prepare CMake ----------
      - name: Prepare CMake
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "macos-13" || "${{ matrix.os }}" == "macos-latest" ]]; then
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" -DCMAKE_CXX_FLAGS_RELEASE="-Os" -DCMAKE_C_FLAGS_RELEASE="-Os" -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON
          elif [[ "${{ matrix.os }}" == "linux-x86" ]]; then
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32 -DCMAKE_CXX_FLAGS_RELEASE="-Os" -DCMAKE_C_FLAGS_RELEASE="-Os" -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON
          elif [[ "${{ matrix.os }}" == "windows-x86" ]]; then
            cmake -S . -B build -A Win32 -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS_RELEASE="-Os" -DCMAKE_C_FLAGS_RELEASE="-Os" -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON
          else
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS_RELEASE="-Os" -DCMAKE_C_FLAGS_RELEASE="-Os" -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON
          fi

      - name: Build SDL ${{ inputs.sdl-version }}
        run: cmake --build build --config Release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: SDL-${{ inputs.sdl-version }}-${{ matrix.os }}
          path: |
            build/**/*.dll
            build/**/*.so
            build/**/*.dylib